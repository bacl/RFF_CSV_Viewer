/*
 * https://github.com/bacl/CNC_CSV_Viewer 
 */
package org.cnc_csv_viewer;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import org.cnc_csv_viewer.data.Beam;
import org.cnc_csv_viewer.io.CSVReader;
import org.cnc_csv_viewer.ui.PainterPanel;

/**
 *
 * @author Bruno
 */
public class CSVViewer extends javax.swing.JFrame {

    public static final String appName = "CNC CSV Viewer";
    private static Color colorHighlight;
    private File selectedCSV_File = null;

    /**
     * Creates new form CSVViewer
     */
    public CSVViewer() {
        init();
    }

    private void init() {
        initComponents();
        this.setTitle(appName);
        this.setLocationRelativeTo(null);
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/org/cnc_csv_viewer/icons/text-x-generic_CNC.png")).getImage());
        scrollPaneCSVPreview.getVerticalScrollBar().setUnitIncrement(16);
        colorHighlight = new Color(155, 255, 155);
        csvPreview.setTxt_label(txt_label);

        txtAreaCSV.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                super.mousePressed(e);
                if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() > 1) {
                    highlightTextAreaSelection(txtAreaCSV);
                } else {
                    txtAreaCSV.getHighlighter().removeAllHighlights();
                }
            }
        });

        lb_about.addHyperlinkListener(new HyperlinkListener() {
            @Override
            public void hyperlinkUpdate(HyperlinkEvent hle) {
                if (HyperlinkEvent.EventType.ACTIVATED.equals(hle.getEventType())) {

                    if (java.awt.Desktop.isDesktopSupported()) {
                        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
                        if (desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
                            try {
                                desktop.browse(new java.net.URI(hle.getURL().toString()));
                            } catch (java.io.IOException e) {
                                e.printStackTrace();
                            } catch (java.net.URISyntaxException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            }
        });

    }

    private static void highlightTextAreaSelection(JTextArea textArea) {
        String highlightedText = textArea.getSelectedText();
        if (highlightedText != null) {
            try {
                if (highlightedText.length() > 2) {
                    int index = -1;
                    int old = 0;
                    do {
                        index = textArea.getText().indexOf(highlightedText, old);
                        if (index >= 0) {
                            textArea.getHighlighter().addHighlight(index, index + highlightedText.length(),
                                    new DefaultHighlighter.DefaultHighlightPainter(colorHighlight));
                            old = index + highlightedText.length();
                        }
                    } while (index != -1);

                }
            } catch (BadLocationException ex) {
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        bt_loadCSV = new javax.swing.JButton();
        bt_reload = new javax.swing.JButton();
        bt_save2img = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        lb_length = new javax.swing.JLabel();
        txt_label = new javax.swing.JLabel();
        tabbedPanel = new javax.swing.JTabbedPane();
        scrollPaneCSVPreview = new javax.swing.JScrollPane();
        csvPreview = new org.cnc_csv_viewer.ui.PainterPanel();
        panelCSVtxt = new javax.swing.JPanel();
        scrollPaneCSVtxt = new javax.swing.JScrollPane();
        txtAreaCSV = new javax.swing.JTextArea();
        panelAbout = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lb_about = new javax.swing.JEditorPane();
        jToolBar1 = new javax.swing.JToolBar();
        bt_exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toolBar.setFloatable(false);

        bt_loadCSV.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cnc_csv_viewer/icons/text-x-generic.png"))); // NOI18N
        bt_loadCSV.setText("Load CSV");
        bt_loadCSV.setMaximumSize(new java.awt.Dimension(80, 36));
        bt_loadCSV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bt_loadCSVMouseReleased(evt);
            }
        });
        toolBar.add(bt_loadCSV);

        bt_reload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cnc_csv_viewer/icons/view-refresh.png"))); // NOI18N
        bt_reload.setToolTipText("ReLoad CSV");
        bt_reload.setMaximumSize(new java.awt.Dimension(36, 36));
        bt_reload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bt_reloadMouseReleased(evt);
            }
        });
        toolBar.add(bt_reload);

        bt_save2img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cnc_csv_viewer/icons/document-save.png"))); // NOI18N
        bt_save2img.setText("Save to PNG");
        bt_save2img.setMaximumSize(new java.awt.Dimension(110, 36));
        bt_save2img.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bt_save2imgMouseReleased(evt);
            }
        });
        toolBar.add(bt_save2img);
        toolBar.add(jSeparator2);

        lb_length.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_length.setText("    Length:");
        lb_length.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        lb_length.setMaximumSize(new java.awt.Dimension(56, 36));
        toolBar.add(lb_length);

        txt_label.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txt_label.setForeground(new java.awt.Color(255, 0, 0));
        txt_label.setText(" ");
        txt_label.setMaximumSize(new java.awt.Dimension(90, 36));
        toolBar.add(txt_label);

        javax.swing.GroupLayout csvPreviewLayout = new javax.swing.GroupLayout(csvPreview);
        csvPreview.setLayout(csvPreviewLayout);
        csvPreviewLayout.setHorizontalGroup(
            csvPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 935, Short.MAX_VALUE)
        );
        csvPreviewLayout.setVerticalGroup(
            csvPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );

        scrollPaneCSVPreview.setViewportView(csvPreview);

        tabbedPanel.addTab("Preview    ", new javax.swing.ImageIcon(getClass().getResource("/org/cnc_csv_viewer/icons/preview.png")), scrollPaneCSVPreview); // NOI18N

        txtAreaCSV.setEditable(false);
        txtAreaCSV.setColumns(20);
        txtAreaCSV.setRows(5);
        txtAreaCSV.setMargin(new java.awt.Insets(8, 8, 8, 8));
        scrollPaneCSVtxt.setViewportView(txtAreaCSV);

        javax.swing.GroupLayout panelCSVtxtLayout = new javax.swing.GroupLayout(panelCSVtxt);
        panelCSVtxt.setLayout(panelCSVtxtLayout);
        panelCSVtxtLayout.setHorizontalGroup(
            panelCSVtxtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneCSVtxt, javax.swing.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE)
        );
        panelCSVtxtLayout.setVerticalGroup(
            panelCSVtxtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneCSVtxt, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
        );

        tabbedPanel.addTab("CSV    ", new javax.swing.ImageIcon(getClass().getResource("/org/cnc_csv_viewer/icons/text-x-generic.png")), panelCSVtxt); // NOI18N

        lb_about.setEditable(false);
        lb_about.setContentType("text/html"); // NOI18N
        lb_about.setText("<html>\r\n  <head>\r \n<style>\nbody{\n    font-family: Helvetica, arial,sans-serif; \n}\n</style>\n  </head>\r\n  <body>\r  \n<h1>Roll Forming Frame Machine CSV Viewer</h1> \nby Bruno Lopes 2013  <br> \n<br>for more info and updates at: <br> <a href=\"https://github.com/bacl/CNC_CSV_Viewer\"> https://github.com/bacl/CNC_CSV_Viewer</a>\n<br>\n<h3>Supported CSV tags:</h3> \n<ul> \n<li>COMPONENT \n<li>LABEL_NRM \n<li>LABEL_INV \n<li>DIMPLE \n<li>LIP_CUT \n<li>SWAGE \n<li>END_TRUSS \n<li>NOTCH \n<li>SERVICE_HOLE \n<li>WEB \n<li>END_TRUSS \n</ul> <br>\n <b>Quick example:</b><br>\n <pre>\nCOMPONENT,B1,LABEL_NRM,1,337.8,DIMPLE,17.0,DIMPLE,322.8,SWAGE,17.0,SWAGE,322.8,END_TRUSS,337.8\nCOMPONENT,B2,LABEL_NRM,1,1127.6,DIMPLE,14.9,DIMPLE,1115.7,SWAGE,14.9,SWAGE,1115.7,END_TRUSS,0.0,END_TRUSS,1127.6\n</pre> \n  \n  </body>\r\n</html>\r\n");
        lb_about.setMargin(new java.awt.Insets(3, 15, 15, 15));
        lb_about.setOpaque(false);
        jScrollPane1.setViewportView(lb_about);

        javax.swing.GroupLayout panelAboutLayout = new javax.swing.GroupLayout(panelAbout);
        panelAbout.setLayout(panelAboutLayout);
        panelAboutLayout.setHorizontalGroup(
            panelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE)
        );
        panelAboutLayout.setVerticalGroup(
            panelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
        );

        tabbedPanel.addTab("  About  ", panelAbout);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        bt_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cnc_csv_viewer/icons/log-out.png"))); // NOI18N
        bt_exit.setText("Exit");
        bt_exit.setFocusable(false);
        bt_exit.setMaximumSize(new java.awt.Dimension(80, 36));
        bt_exit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bt_exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bt_exitMouseReleased(evt);
            }
        });
        jToolBar1.add(bt_exit);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(tabbedPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPanel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_reloadMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_reloadMouseReleased
        Thread th = new Thread(new Runnable() {
            @Override
            public void run() {
                loadCSVFile();

                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        th.start();
    }//GEN-LAST:event_bt_reloadMouseReleased

    private void bt_loadCSVMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_loadCSVMouseReleased
        Thread th = new Thread(new Runnable() {
            @Override
            public void run() {
                JFileChooser fileSave = new JFileChooser();
                FileFilter filter = new FileNameExtensionFilter("CNC CSV File ", "csv");
                fileSave.addChoosableFileFilter(filter);
                fileSave.setFileFilter(filter);
                if (selectedCSV_File != null) {
                    fileSave.setSelectedFile(selectedCSV_File);
                }
                int ret = fileSave.showOpenDialog(null);

                if (ret == JFileChooser.APPROVE_OPTION) {
                    selectedCSV_File = fileSave.getSelectedFile();
                    loadCSVFile();
                }
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        th.start();
    }//GEN-LAST:event_bt_loadCSVMouseReleased

    private void bt_save2imgMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_save2imgMouseReleased
        Thread th = new Thread(new Runnable() {
            @Override
            public void run() {
                JFileChooser fileSave = new JFileChooser();
                FileFilter filter = new FileNameExtensionFilter("PNG Image ", "png");
                fileSave.addChoosableFileFilter(filter);
                fileSave.setFileFilter(filter);
                if (selectedCSV_File != null) {
                    fileSave.setSelectedFile(selectedCSV_File);
                }
                int ret = fileSave.showSaveDialog(null);

                if (ret == JFileChooser.APPROVE_OPTION) {
                    String str = fileSave.getSelectedFile().getAbsolutePath();
                    if (!(str.endsWith(".png") || str.endsWith(".PNG"))) {
                        str = str + ".png";
                    }
                    try {
                        BufferedImage img = csvPreview.getImage();
                        if (img != null) {
                            File outputfile = new File(str);
                            ImageIO.write(img, "png", outputfile);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        th.start();


    }//GEN-LAST:event_bt_save2imgMouseReleased

    private void bt_exitMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_exitMouseReleased
        this.dispose();        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_bt_exitMouseReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_exit;
    private javax.swing.JButton bt_loadCSV;
    private javax.swing.JButton bt_reload;
    private javax.swing.JButton bt_save2img;
    private org.cnc_csv_viewer.ui.PainterPanel csvPreview;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JEditorPane lb_about;
    private javax.swing.JLabel lb_length;
    private javax.swing.JPanel panelAbout;
    private javax.swing.JPanel panelCSVtxt;
    private javax.swing.JScrollPane scrollPaneCSVPreview;
    private javax.swing.JScrollPane scrollPaneCSVtxt;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JTextArea txtAreaCSV;
    private javax.swing.JLabel txt_label;
    // End of variables declaration//GEN-END:variables

    private void loadCSVFile() {
        ArrayList<Beam> lista;
        if (selectedCSV_File != null) {
            try {
                CSVReader c = new CSVReader();
                lista = c.readFile(selectedCSV_File.getAbsolutePath(), txtAreaCSV);
                if (lista != null) {
                    csvPreview.setPreferredSize(new Dimension(c.getMaxLength() + PainterPanel.barraXoffset + PainterPanel.barraXXoffset, lista.size() * 50 + PainterPanel.barraYoffset + PainterPanel.barraYYoffset));
                    System.out.println("" + (lista.size() * 50 + 190) + "  " + (c.getMaxLength() + 50));
                    this.setTitle(appName + " - " + selectedCSV_File.getName());
                }
                csvPreview.setList(lista);
                csvPreview.drawBeams();

            } catch (Exception ex) {
                Logger.getLogger(CSVViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        csvPreview.updateUI();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {

            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());


        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CSVViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CSVViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CSVViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CSVViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CSVViewer().setVisible(true);
            }
        });
    }
}
